import React, { useState } from 'react';
import { Button, Textarea, Card, ToggleButton } from '@fluentui/react-components';
import { Plus, FileText, MessageSquare } from 'lucide-react';
import { DefaultService, CreateRuleFromDescriptionRequest, CreateRuleFromTextRequest } from '@/api';
import { colors } from '@/lib/theme';
import { cn } from '@/lib/utils';

type RuleCreationMode = 'description' | 'text';

interface AddRuleFormProps {
  onRuleAdded: () => void;
}

export const AddRuleForm = ({ onRuleAdded }: AddRuleFormProps) => {
  const [mode, setMode] = useState<RuleCreationMode>('description');
  const [description, setDescription] = useState('');
  const [text, setText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const inputValue = mode === 'description' ? description.trim() : text.trim();
    if (!inputValue) {
      setError(mode === 'description' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞' : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —è–ø–æ–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      if (mode === 'description') {
        // –†–∞–∑–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
        const descriptions = description
          .split('\n')
          .map(desc => desc.trim())
          .filter(desc => desc.length > 0);

        if (descriptions.length === 0) {
          setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞');
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for (const desc of descriptions) {
          const request: CreateRuleFromDescriptionRequest = {
            description: desc
          };
          await DefaultService.createRuleFromDescription(request);
        }
      } else {
        const request: CreateRuleFromTextRequest = {
          text: text.trim()
        };
        await DefaultService.createRuleFromText(request);
      }

      setDescription('');
      setText('');
      onRuleAdded();
    } catch (error) {
      console.error('Error creating rule:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const getCurrentInputValue = () => {
    return mode === 'description' ? description : text;
  };

  return (
    <div className="space-y-4">
      {/* Mode Selection */}
      <Card className={cn("p-4", colors.ui.card.bg, colors.ui.card.border)}>
        <div className="space-y-3">
          <h3 className={cn("text-lg font-semibold", colors.ui.text.primary)}>–°–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞</h3>
          <div className="flex gap-3">
            <ToggleButton
              checked={mode === 'description'}
              onClick={() => setMode('description')}
              icon={<MessageSquare className="h-4 w-4" />}
              className="flex-1"
            >
              –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é
            </ToggleButton>
            <ToggleButton
              checked={mode === 'text'}
              onClick={() => setMode('text')}
              icon={<FileText className="h-4 w-4" />}
              className="flex-1"
            >
              –ò–∑ —è–ø–æ–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            </ToggleButton>
          </div>
        </div>
      </Card>

      {/* Form */}
      <Card className={cn("p-6", colors.ui.card.bg, colors.ui.card.border)}>
        <form onSubmit={handleSubmit} className="space-y-4">
          {mode === 'description' ? (
            <div>
              <div className={cn("text-sm mb-3 p-3 rounded-md", colors.ui.card.bg)}>
                <p className={cn("text-sm", colors.ui.text.secondary)}>
                  –û–ø–∏—à–∏—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: &quot;–ø—Ä–∞–≤–∏–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏—Ü—ã „ÅØ&quot;,
                  &quot;–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è „Å¶-—Ñ–æ—Ä–º—ã&quot;, &quot;–≤–µ–∂–ª–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–æ–≤&quot; –∏ —Ç.–¥.
                  –ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Ç–µ—Å—Ç–∞–º–∏.
                </p>
                <p className={cn("text-sm mt-2 font-medium", colors.ui.text.primary)}>
                  üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏. –ö–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ.
                </p>
              </div>
              <Textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder={`–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞...

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
–ø—Ä–∞–≤–∏–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏—Ü—ã „ÅØ
–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è „Å¶-—Ñ–æ—Ä–º—ã
–≤–µ–∂–ª–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–æ–≤`}
                rows={6}
                className="w-full"
                disabled={isLoading}
              />
            </div>
          ) : (
            <div>
              <div className={cn("text-sm mb-3 p-3 rounded-md", colors.ui.card.bg)}>
                <p className={cn("text-sm", colors.ui.text.secondary)}>
                  –í–≤–µ–¥–∏—Ç–µ —è–ø–æ–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç (—Ö–∏—Ä–∞–≥–∞–Ω–∞, –∫–∞—Ç–∞–∫–∞–Ω–∞, –∫–∞–Ω–¥–∑–∏), —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
                  –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                  —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Ç–µ—Å—Ç–∞–º–∏.
                </p>
              </div>
              <Textarea
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —è–ø–æ–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞..."
                rows={4}
                className="w-full"
                disabled={isLoading}
              />
            </div>
          )}

          {error && (
            <div className="p-3 bg-red-100 border border-red-300 rounded-md">
              <p className="text-red-700 text-sm">{error}</p>
            </div>
          )}

          <div className="flex justify-end space-x-3">
            <Button
              type="submit"
              appearance="primary"
              icon={<Plus className="h-4 w-4" />}
              disabled={isLoading || !getCurrentInputValue().trim()}
            >
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : (mode === 'description' && description.split('\n').filter(d => d.trim()).length > 1 ? '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ')}
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
};